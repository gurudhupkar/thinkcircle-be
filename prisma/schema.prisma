generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
  MODERATOR
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum NotificationType {
  JOIN_REQUEST
  MESSAGE
  SYSTEM
}

model User {
  id               String          @id @default(uuid())
  firstname        String
  lastname         String
  email            String          @unique
  passwordHash     String
  profile          Profile?
  profilepic       String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  resettoken       String?
  resettokenExpiry DateTime?
  onboarding       Boolean @default(false)


  messages       Message[]       @relation("UserMessages")
  notifications  Notification[]
  groupsAdmin    Group[]         @relation("GroupAdmin") 
}

model Profile {
  id            String           @id @default(uuid())
  user          User             @relation(fields: [userId], references: [id])
  userId        String           @unique
  subjects      String[]
  learningStyle String
  availability  String[]
  goals         String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt


  memberships   GroupMember[]
  joinRequests  GroupJoinRequest[]
}

model Group {
  id            String            @id @default(uuid())
  name          String
  subjectFocus  String
  createdByAI   Boolean           @default(true)
  maxSize       Int               @default(10)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt


  members       GroupMember[]
  messages      Message[]
  summaries     Summary[]
  admin         User              @relation("GroupAdmin", fields: [adminId], references: [id])
  adminId       String
  joinRequests  GroupJoinRequest[]
}

model GroupMember {
  id        String   @id @default(uuid())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  profile   Profile  @relation(fields: [profileId], references: [id])
  profileId String
  role      Role     @default(MEMBER)
  joinedAt  DateTime @default(now())

  @@unique([groupId, profileId])
}

model GroupJoinRequest {
  id        String        @id @default(uuid())
  group     Group         @relation(fields: [groupId], references: [id])
  groupId   String
  profile   Profile       @relation(fields: [profileId], references: [id])
  profileId String
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())

  @@unique([groupId, profileId])
}

model Message {
  id        String   @id @default(uuid())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  sender    User     @relation("UserMessages", fields: [senderId], references: [id])
  senderId  String
  message   String
  createdAt DateTime @default(now())
}

model Summary {
  id            String   @id @default(uuid())
  group         Group    @relation(fields: [groupId], references: [id])
  groupId       String
  topicsCovered String[]
  keyQuestions  String[]
  actionItems   String[]
  createdAt     DateTime @default(now())
}

model Notification {
  id        String           @id @default(uuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  type      NotificationType
  content   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
}
